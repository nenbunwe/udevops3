version: 2.1

orbs:
  node: circleci/node@4.1.0
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo s3://udapeople-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
          #

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          # Add when this will run1
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 ));
            then
              cd ~/udevops3/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Unit Test
          command: |
            cd frontend
            npm i
            npm run build
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end Unit Test
          command: |
            cd backend
            npm install
            npm test
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-build1

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-build1

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-nuild]
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm i
            npm audit --audit-level=critical
  deploy-infrastructure:
      docker:
        # Docker image here that supports AWS CLI
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar
        - run: yum install -y gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags udevops3=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags udevops3=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Add Backend IP To Ansible Inventory
            command: |
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> ~/udacity.circleci/ansible/inventory.txt
              cat ~/udacity/.circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - udevops3/.circleci/ansible/inventory.txt
        # Here's where you will add some code to rollback on failure
        - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9e:a6:7e:6d:13:a3:1c:c4:68:e5:32:1e:25:25:a0:ef"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip aws-cli openssh
      - run:
          name: Configure server
          command: |
            pwd
            cd .circleci/ansible
            ls -a
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m
      - destroy-environment:
          workflow_id: {CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install AWS CLI dependencies
          command: |
            apk add --update --no-cache nodejs npm aws-cli

      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install -g npm
            sudo npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
          no_output_timeout: 30m

      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/udevops3/backend/migrations_dump.txt
            then
             curl --insecure https://kvdb.io/DmEXTpNf77FiG9yZn8McNF/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar
            apk add --update --no-cache gzip
            apk add --update --no-cache nodejs
            apk add --update --no-cache npm
            apk add --update --no-cache aws-cli
            apk add --update --no-cache curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            sudo npm install -g npm@latest
            rm -rf node_modules
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
          # workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
          # workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["9e:a6:7e:6d:13:a3:1c:c4:68:e5:32:1e:25:25:a0:ef"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip nodejs npm curl aws-cli openssh

      - run:
          name: Create the  .env file
          command: |
            cd backend
            touch .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}"  >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_CONNECTION=postgres" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./src/migrations" >> .env
            echo "TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts" >> .env
            echo "TYPEORM_MIGRATIONS=./src/migrations/*.ts" >> .env
            cat .env

      - run:
        name: Deploy Our backend
        command: |
          pwd
          ls -al
          npm install
          npm run build
          cd ..
          pwd
          ls -al
          tar -C backend -czvf artifact.tar.gz .

          cd .circleci/ansible

          echo "Present working directory is -------"
          cd .circleci/ansible
          echo "Contents  of the inventory.txt file is -------"
          cat inventory.txt
          ansible-playbook -i inventory.txt deploy-backend.yml
        no_output_timeout: 30m

      - destroy-environment
          # workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
          # workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm curl aws-cli
      - run:
          name: Get backend url and backend smoketest
          command: |
            export BACKEND_IP=$(aws ec2 describe instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo ${BACKEND_IP}

            export BACKEND=$(echo $ BACKEND_IP | grep -o '[^ ]*$')

            echo $BACKEND
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"

            echo "Sleeping for 1 minnute"
            sleep 60 sec

            if curl -v "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            # your code here
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"

              echo ${URL}

              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment
          # workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
          # workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text | grep -o '[^-]*$' )
            echo $OLD_WORKFLOW_ID >> ~/udevops3/Old_Workflow_Id.txt
            cat ~/udevops3/Old_Workflow_Id.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - udevops3/Old_Workflow_Id.txt

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags udevops3=udapeople
            echo Old_Workflow_Id: $(cat ~/udevops3/Old_Workflow_Id.txt)
            echo CurrentWorkflow: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure

cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Get old stack workflow id
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            cat ~/udevops3/OlWorkflowID.txt
            export OldWorkflowID=$(curl --insecure https://kvdb.io/DmEXTpNf77FiG9yZn8McNF/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID

      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/udevops3/OlWorkflowID.txt)
            echo Old Workflow ID: $OldWorkflowID
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "Deleting old stack"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive  || true
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"  || true
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"  || true
            else
              echo "stack is the latest"
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
